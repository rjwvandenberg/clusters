# Setup k8s prereqs for runc, containerd, cni, kubeadm, cilium
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/
# https://docs.cilium.io/en/stable/network/kubernetes/kubeproxy-free/#kubeproxy-free
# think this mostly sets it up correctly

- name: check prereq
  apt:
    name:
      - gpg
      - python3-kubernetes    # for ansible plugins
    update_cache: true

# Container runtime adjustments https://kubernetes.io/docs/setup/production-environment/container-runtimes/
# Dual stack networking https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/dual-stack-support/
- name: Enable ip forwarding
  copy:
    src: ../k8s/20-ip-forwarding.conf
    dest: /etc/sysctl.d/
    owner: root
    group: root
    mode: 0644

- name: Enable iptables on bridges
  copy:
    src: ../k8s/20-iptables-bridge.conf
    dest: /etc/sysctl.d/
    owner: root
    group: root
    mode: 0644

- name: Enable modules for k8s
  copy:
    src: ../k8s/20-k8s-modules.conf
    dest: /etc/modules-load.d/
    owner: root
    group: root
    mode: 0644

# Will autoselect cgroupdriver as systemd (k8s >= v1.22) https://kubernetes.io/docs/setup/production-environment/container-runtimes/#systemd-cgroup-driver

# whoops forgot to remove swap in the ubuntu disk setup installer
# Alternative is to enable NodeSwap featuregate: https://kubernetes.io/docs/concepts/architecture/nodes/#swap-memory
# Reason for not applying the feature, secrets could be swapped to disk
- name: Remove swap
  command: swapoff -a

- name: Remove swap permanently
  command: sed -i '/swap/d' /etc/fstab

- name: Remove swap file
  file:
    path: /swap.img
    state: absent

# https://github.com/containerd/containerd/blob/v2.0.0-rc.0/docs/getting-started.md
- name: Check Containerd
  stat:
    path: /usr/local/bin/containerd
  register: hasContainerd

- name: install containerd and containerd.service
  script: ../k8s/scripts/install-containerd.sh
  when: not hasContainerd.stat.exists
  environment:
      ARCH: hostvars[inventory_hostname].arch

- name: Create containerd config directory
  file:
    path: /etc/containerd
    state: directory
    owner: root
    group: root
    mode: 0755  # need x to enter a directory

# Containerd config generated with containerd config default, see file for changes made.
- name: Copy containerd config
  template: 
    src: ../k8s/configs/containerd.toml.j2
    dest: /etc/containerd/config.toml
    owner: root
    group: root
    mode: 0644

# https://github.com/opencontainers/runc
- name: Check runc
  stat:
    path: /usr/local/sbin/runc
  register: hasRunc

- name: Install runc
  script: ../k8s/scripts/install-runc.sh
  when: not hasRunc.stat.exists
  environment:
      ARCH: hostvars[inventory_hostname].arch

# https://github.com/containernetworking/plugins
- name: Check cni plugins
  stat:
    path: /opt/cni/bin/bandwidth
  register: hasCni

- name: Install cni plugins
  script: ../k8s/scripts/install-cni-plugins.sh
  when: not hasCni.stat.exists
  environment:
      ARCH: hostvars[inventory_hostname].arch

# https://github.com/kubernetes-sigs/cri-tools
- name: Check crictl
  stat:
    path: /usr/local/bin/crictl
  register: hasCrictl

- name: Install crictl
  script: ../k8s/scripts/install-crictl.sh
  when: not hasCrictl.stat.exists
  environment:
      ARCH: hostvars[inventory_hostname].arch

# https://github.com/containerd/nerdctl
- name: Check nerdctl
  stat:
    path: /usr/local/bin/nerdctl
  register: hasNerdctl

- name: Install nerdctl
  script: ../k8s/scripts/install-nerdctl.sh
  when: not hasNerdctl.stat.exists
  environment:
      ARCH: hostvars[inventory_hostname].arch

- name: Create nerdctl config directory
  file:
    path: /etc/nerdctl
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Copy nerdctl config
  copy: 
    src: ../k8s/configs/nerdctl.toml
    dest: /etc/nerdctl/
    owner: root
    group: root
    mode: 0644

# https://github.com/moby/buildkit
- name: Check buildctl
  stat:
    path: /usr/local/bin/buildctl
  register: hasBuildctl

- name: Install buildctl for k8s.io namespace 
  script: ../k8s/scripts/install-buildctl.sh
  when: not hasBuildctl.stat.exists
  environment:
      ARCH: hostvars[inventory_hostname].arch

- name: Create buildkit config directory
  file:
    path: /etc/buildkit
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Copy buildkitd config
  copy: 
    src: ../k8s/configs/buildkitd.toml
    dest: /etc/buildkit/
    owner: root
    group: root
    mode: 0644

# kubernetes
- name: Add kubernetes repo key
  apt_key:
    url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
    keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Add kubernetes repo
  apt_repository:
    repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /
    filename: kubernetes

- name: Install kubernetes packages
  apt:
    name:
      - kubelet=1.29*
      - kubeadm=1.29*
      - kubectl=1.29*
    update_cache: true